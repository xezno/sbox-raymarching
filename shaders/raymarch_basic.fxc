//================================================================================
// Basic ray marching functions
// Author: Alex "xezno" Guthrie
// ================================================================================

#define PI 3.1415925359
#define SURFACE_DIST 0.1
#define EPS 0.005

int MaxSteps< UiGroup(""); UiType( Slider ); Default( 128 ); Range( 1, 4096 ); >;
IntAttribute( MaxSteps, true );

int MaxDist< UiGroup(""); UiType( Slider ); Default( 32 ); Range( 1, 32768 ); UiStep( 128 ); >;
IntAttribute( MaxDist, true );

float GetDist( float3 p, out Material mat ); // Redefine this in your own file!!!

float SinAdj( float offset = 0 ) 
{
    return ( 0.5 * sin( g_flTime * 4 + offset ) + 0.5 );
}

float3 GetNormal( float3 p )
{
    Material _;
    float d = GetDist( p, _ );
    float2 e = float2( EPS, 0 );
    float3 n = d - float3(
        GetDist( p - e.xyy, _ ),  
        GetDist( p - e.yxy, _ ),
        GetDist( p - e.yyx, _ )
    );

    return normalize( n );
}

float RayMarch( float3 ro, float3 rd, out Material mat ) 
{
    float dO = 0;
    for (int i = 0; i < MaxSteps; i++)
    { 
        float3 p = (rd * dO) + ro;
        float ds = GetDist( p, mat );
        dO += ds * 0.25;

        ro -= float3( 0, 0, 0.001 );
        if ( dO > MaxDist || ds < SURFACE_DIST )
            break;
    }
    return dO;
}

struct Ray 
{
    float3 pos;
    float3 dir;
};

Ray CreateRay(float2 uv, float3 camPos, float3 lookAt, float zoom) 
{
    float3 f = g_vCameraDirWs;
    float3 u = g_vCameraUpDirWs;
    float3 r = normalize(cross(f, u));
    float3 c = ( camPos + g_vCameraDirWs ) + f * zoom;
    float3 i = c + uv.x * r + uv.y * u;
    float3 dir = i -camPos;

    Ray ray;
    ray.pos = camPos;
    ray.dir = normalize( dir );
    return ray;
}

void SetupCamera( float2 uvs, float fov, out float Px, out float Py ) 
{
    float2 ScreenResolution = g_vRenderTargetSize / ResolutionDownSampling;
    const float texSize = g_vRenderTargetSize / ScreenResolution;
    float2 snappedUvs = round( uvs / texSize + 0.5 ) * texSize;

    float aspectRatio = g_vRenderTargetSize.x / g_vRenderTargetSize.y;
    Px = (2 * ((snappedUvs.x + 0.5) / g_vRenderTargetSize.x) - 1) * tan( fov / 2 * PI / 180 ) * aspectRatio;
    Py = (2 * ((snappedUvs.y + 0.5) / g_vRenderTargetSize.y) - 1) * tan( fov / 2 * PI / 180 );
    Py = -Py;
}

// Union Operation
float OpU( float a, float b, Material mat, inout Material matO )
{
    float d = min( a, b );
    matO = matO;

    if ( b - d < EPS )
        matO = mat;
    
    return d;
}


// Intersect Operation
float OpI( float a, float b, Material mat, inout Material matO )
{
    float d = max( a, b );
    matO = matO;

    if ( b - d > EPS )
        matO = mat;

    return d;
}

// Diff Operation
float OpD( float a, float b, Material mat, inout Material matO )
{
    float d = max( a, -b );
    matO = matO;

    if ( b - d > EPS )
        matO = mat;

    return d;
}